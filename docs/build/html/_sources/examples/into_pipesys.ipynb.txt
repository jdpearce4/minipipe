{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to PipeSystems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Minipipe has two API's, PipeLine and PipeSystem. PipeLine is a simple sequential API for linear pipelines. However, it's also possible to build more complex pipe systems with Minipipe that may branch and join to form more complex graph topologies. In this section we'll introduce the concepts of multiple inputs/outputs, switchs and regulators.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import minipipe as mp\n",
    "import numpy as np\n",
    "\n",
    "# Define functors\n",
    "\n",
    "def genRand(n=5):\n",
    "    # generates fake data\n",
    "    for _ in range(n):\n",
    "        yield np.random.rand(4)\n",
    "\n",
    "def batch(batch_size=2):\n",
    "    # A coroutine for breaking data up into batches of 2\n",
    "    x = (yield)\n",
    "    for i in range(len(x)//batch_size):\n",
    "        yield x[i*batch_size:(i+1)*batch_size]\n",
    "\n",
    "def sumBatch(x):\n",
    "    # simple tranform on data\n",
    "    return x.sum()\n",
    "\n",
    "def switch(x):\n",
    "    # if-then switch \n",
    "    return [x, None] if x > 1 else [None, x]\n",
    "\n",
    "def output_gt_1(x):\n",
    "    # sink for greater than 1\n",
    "    print('1 <',x)\n",
    "\n",
    "def output_lt_1(x):\n",
    "    # sink for less than 1\n",
    "    print('1 >',x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we've introduced a Python coroutine `batch`. This coroutine breaks up the data into batches of size 2. This is an example of a Regulator functor. \n",
    "\n",
    "We've also introduced the concept of a switch functor. This functor has two outputs, in this case a list with two elements, however we could have just as easily used a standard tuple. When a Python `None` is encountered in a pipe segment it is simple ignored. Thus `switch` returns x in either the first or second output depending on the value of x. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The PipeSystem API allows you to define general graphs that may branch and join however you choose. In the PipeSystem API you explicitly define the nodes (Pipes) and edges (Streams) of your graph. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define streams\n",
    "\n",
    "s1, s2, s3, s4, s5 = mp.Stream(), mp.Stream(), mp.Stream(), mp.Stream(), mp.Stream()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Pipe segments with up/downstreams\n",
    "# Order is not important\n",
    "\n",
    "pipes = [\n",
    "    mp.Source(genRand, 'source1', downstreams=[s1]),\n",
    "    mp.Source(genRand, 'source2', downstreams=[s1]),\n",
    "    mp.Regulator(batch, 'batcher', upstreams=[s1], downstreams=[s2]),\n",
    "    mp.Transform(sumBatch, 'sum', upstreams=[s2], downstreams=[s3]),\n",
    "    mp.Transform(switch, 'switch', upstreams=[s3], downstreams=[s4, s5]),\n",
    "    mp.Sink(output_gt_1, 'print_gt_1', upstreams=[s4]),\n",
    "    mp.Sink(output_lt_1, 'print_lt_1', upstreams=[s5]),\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since `switch` has two outputs it must have two downstreams, otherwise the list/tuple will be interpreted as a single output. Pipe segments may also have multiple inputs, in which case they must have multiple upstreams. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"212pt\" height=\"620pt\"\n",
       " viewBox=\"0.00 0.00 211.94 620.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 616)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-616 207.9418,-616 207.9418,4 -4,4\"/>\n",
       "<!-- 139638726435784 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>139638726435784</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"55.4458\" cy=\"-594\" rx=\"38.1938\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"55.4458\" y=\"-590.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">source1</text>\n",
       "</g>\n",
       "<!-- 139638987785944 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>139638987785944</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"129.4458,-540 75.4458,-540 75.4458,-504 129.4458,-504 129.4458,-540\"/>\n",
       "<text text-anchor=\"middle\" x=\"102.4458\" y=\"-518.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream</text>\n",
       "</g>\n",
       "<!-- 139638726435784&#45;&gt;139638987785944 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>139638726435784&#45;&gt;139638987785944</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M66.8232,-576.5708C72.2996,-568.1815 78.9855,-557.9392 85.0796,-548.6035\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"88.1469,-550.3076 90.6823,-540.0206 82.2852,-546.4812 88.1469,-550.3076\"/>\n",
       "</g>\n",
       "<!-- 139638726437352 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>139638726437352</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"102.4458\" cy=\"-450\" rx=\"36.2938\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"102.4458\" y=\"-446.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">batcher</text>\n",
       "</g>\n",
       "<!-- 139638987785944&#45;&gt;139638726437352 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>139638987785944&#45;&gt;139638726437352</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M102.4458,-503.8314C102.4458,-496.131 102.4458,-486.9743 102.4458,-478.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"105.9459,-478.4132 102.4458,-468.4133 98.9459,-478.4133 105.9459,-478.4132\"/>\n",
       "</g>\n",
       "<!-- 139638738824496 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>139638738824496</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"129.4458,-396 75.4458,-396 75.4458,-360 129.4458,-360 129.4458,-396\"/>\n",
       "<text text-anchor=\"middle\" x=\"102.4458\" y=\"-374.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream</text>\n",
       "</g>\n",
       "<!-- 139638726437352&#45;&gt;139638738824496 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>139638726437352&#45;&gt;139638738824496</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M102.4458,-431.8314C102.4458,-424.131 102.4458,-414.9743 102.4458,-406.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"105.9459,-406.4132 102.4458,-396.4133 98.9459,-406.4133 105.9459,-406.4132\"/>\n",
       "</g>\n",
       "<!-- 139638726436624 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>139638726436624</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"150.4458\" cy=\"-594\" rx=\"38.1938\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"150.4458\" y=\"-590.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">source2</text>\n",
       "</g>\n",
       "<!-- 139638726436624&#45;&gt;139638987785944 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>139638726436624&#45;&gt;139638987785944</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M138.8263,-576.5708C133.2334,-568.1815 126.4053,-557.9392 120.1815,-548.6035\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"122.9187,-546.3996 114.4595,-540.0206 117.0944,-550.2826 122.9187,-546.3996\"/>\n",
       "</g>\n",
       "<!-- 139638726438080 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>139638726438080</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"102.4458\" cy=\"-306\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"102.4458\" y=\"-302.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">sum</text>\n",
       "</g>\n",
       "<!-- 139638738824496&#45;&gt;139638726438080 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>139638738824496&#45;&gt;139638726438080</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M102.4458,-359.8314C102.4458,-352.131 102.4458,-342.9743 102.4458,-334.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"105.9459,-334.4132 102.4458,-324.4133 98.9459,-334.4133 105.9459,-334.4132\"/>\n",
       "</g>\n",
       "<!-- 139638738825112 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>139638738825112</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"129.4458,-252 75.4458,-252 75.4458,-216 129.4458,-216 129.4458,-252\"/>\n",
       "<text text-anchor=\"middle\" x=\"102.4458\" y=\"-230.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream</text>\n",
       "</g>\n",
       "<!-- 139638726438080&#45;&gt;139638738825112 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>139638726438080&#45;&gt;139638738825112</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M102.4458,-287.8314C102.4458,-280.131 102.4458,-270.9743 102.4458,-262.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"105.9459,-262.4132 102.4458,-252.4133 98.9459,-262.4133 105.9459,-262.4132\"/>\n",
       "</g>\n",
       "<!-- 139638726438808 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>139638726438808</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"102.4458\" cy=\"-162\" rx=\"33.5952\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"102.4458\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">switch</text>\n",
       "</g>\n",
       "<!-- 139638738825112&#45;&gt;139638726438808 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>139638738825112&#45;&gt;139638726438808</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M102.4458,-215.8314C102.4458,-208.131 102.4458,-198.9743 102.4458,-190.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"105.9459,-190.4132 102.4458,-180.4133 98.9459,-190.4133 105.9459,-190.4132\"/>\n",
       "</g>\n",
       "<!-- 139638726357568 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>139638726357568</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"93.4458,-108 39.4458,-108 39.4458,-72 93.4458,-72 93.4458,-108\"/>\n",
       "<text text-anchor=\"middle\" x=\"66.4458\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream</text>\n",
       "</g>\n",
       "<!-- 139638726438808&#45;&gt;139638726357568 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>139638726438808&#45;&gt;139638726357568</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M93.7312,-144.5708C89.623,-136.3544 84.6262,-126.3608 80.0368,-117.1821\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"83.0588,-115.3996 75.4561,-108.0206 76.7978,-118.5301 83.0588,-115.3996\"/>\n",
       "</g>\n",
       "<!-- 139638726358184 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>139638726358184</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"175.4458,-108 121.4458,-108 121.4458,-72 175.4458,-72 175.4458,-108\"/>\n",
       "<text text-anchor=\"middle\" x=\"148.4458\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream</text>\n",
       "</g>\n",
       "<!-- 139638726438808&#45;&gt;139638726358184 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>139638726438808&#45;&gt;139638726358184</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M113.3471,-144.937C118.7027,-136.5544 125.2817,-126.2569 131.2906,-116.8516\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"134.3841,-118.5105 136.8185,-108.1992 128.4852,-114.7418 134.3841,-118.5105\"/>\n",
       "</g>\n",
       "<!-- 139638726411096 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>139638726411096</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"47.4458\" cy=\"-18\" rx=\"47.3916\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.4458\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">print_gt_1</text>\n",
       "</g>\n",
       "<!-- 139638726357568&#45;&gt;139638726411096 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>139638726357568&#45;&gt;139638726411096</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M61.6513,-71.8314C59.5653,-63.9266 57.0744,-54.4872 54.7651,-45.7365\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"58.1087,-44.6894 52.1729,-35.9134 51.3404,-46.4755 58.1087,-44.6894\"/>\n",
       "</g>\n",
       "<!-- 139638726411824 -->\n",
       "<g id=\"node12\" class=\"node\">\n",
       "<title>139638726411824</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"158.4458\" cy=\"-18\" rx=\"45.4919\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"158.4458\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">print_lt_1</text>\n",
       "</g>\n",
       "<!-- 139638726358184&#45;&gt;139638726411824 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>139638726358184&#45;&gt;139638726411824</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M150.9692,-71.8314C152.0387,-64.131 153.3105,-54.9743 154.499,-46.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"157.9793,-46.7997 155.8884,-36.4133 151.0459,-45.8367 157.9793,-46.7997\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x7f002cae7ba8>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build pipesystem\n",
    "\n",
    "psys = mp.PipeSystem(pipes)\n",
    "psys.build()\n",
    "psys.diagram(draw_streams=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-12-13 19:08:00,866 - INFO - source1 - End of stream\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 < 1.5679524130331748\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-12-13 19:08:00,878 - INFO - source1 - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 < 1.4769439269027278\n",
      "1 < 1.0743556969907908\n",
      "1 > 0.2705892033763937\n",
      "1 > 0.9882292069339867\n",
      "1 > 0.9212305814786037\n",
      "1 < 1.5679524130331748\n",
      "1 > 0.954962071386282\n",
      "1 > 0.790318022693491\n",
      "1 < 1.4769439269027278\n",
      "1 > 0.2705892033763937\n",
      "1 < 1.0743556969907908\n",
      "1 > 0.9174229362808922\n",
      "1 > 0.8151774581968392\n",
      "1 > 0.9882292069339867\n",
      "1 > 0.9212305814786037\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-12-13 19:08:00,892 - INFO - print_gt_1 - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 > 0.954962071386282\n",
      "1 > 0.790318022693491\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-12-13 19:08:00,895 - INFO - print_lt_1 - Local termination\n",
      "2019-12-13 19:08:00,887 - INFO - batcher - Local termination\n",
      "2019-12-13 19:08:00,884 - INFO - source2 - End of stream\n",
      "2019-12-13 19:08:00,889 - INFO - sum - Local termination\n",
      "2019-12-13 19:08:00,920 - INFO - source2 - Local termination\n",
      "2019-12-13 19:08:00,895 - INFO - switch - Local termination\n"
     ]
    }
   ],
   "source": [
    "# Run pipesystem\n",
    "\n",
    "psys.run()\n",
    "psys.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fibonacci Sequence"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the PipSystem API its possible to build graphs with loops. Loops can be used to store states in a Stream (class functors also allow for this, see the next section). Here's a useless example calculating the Fibonacci sequence with a stateless functor. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from multiprocessing import Event\n",
    "\n",
    "s1 = mp.Stream()\n",
    "s2 = mp.Stream()\n",
    "\n",
    "term_flag = Event() # minipipe uses multiprocessing Events for termination flags\n",
    "n = 10000 # max fib number\n",
    "\n",
    "# initialize streams instead of using a Source\n",
    "s1.q.put(0) \n",
    "s2.q.put(1)\n",
    "\n",
    "def fib(x_1, x_2):\n",
    "    \n",
    "    # terminate when n is reached\n",
    "    if x_1 >= n:\n",
    "        term_flag.set() \n",
    "        \n",
    "    print(x_1)\n",
    "    \n",
    "    return x_2, x_1 + x_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"134pt\" height=\"116pt\"\n",
       " viewBox=\"0.00 0.00 134.00 116.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 112)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-112 130,-112 130,4 -4,4\"/>\n",
       "<!-- 139638726551648 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>139638726551648</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"63\" cy=\"-90\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"63\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">fib</text>\n",
       "</g>\n",
       "<!-- 139638726550584 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>139638726550584</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"54,-36 0,-36 0,0 54,0 54,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"27\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream</text>\n",
       "</g>\n",
       "<!-- 139638726551648&#45;&gt;139638726550584 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>139638726551648&#45;&gt;139638726550584</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M49.5101,-74.3771C44.2925,-65.9398 38.6601,-55.276 34.1698,-45.4994\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"37.3009,-43.9219 30.1179,-36.1338 30.8764,-46.7014 37.3009,-43.9219\"/>\n",
       "</g>\n",
       "<!-- 139638726551816 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>139638726551816</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"126,-36 72,-36 72,0 126,0 126,-36\"/>\n",
       "<text text-anchor=\"middle\" x=\"99\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream</text>\n",
       "</g>\n",
       "<!-- 139638726551648&#45;&gt;139638726551816 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>139638726551648&#45;&gt;139638726551816</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M66.1319,-71.8314C69.368,-63.7925 73.9746,-54.1666 78.7828,-45.2918\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"81.9292,-46.8385 83.8174,-36.4133 75.8401,-43.3856 81.9292,-46.8385\"/>\n",
       "</g>\n",
       "<!-- 139638726550584&#45;&gt;139638726551648 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>139638726550584&#45;&gt;139638726551648</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M42.1826,-36.4133C46.8886,-44.3141 51.7905,-53.7132 55.7918,-62.417\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"52.6828,-64.0454 59.8681,-71.8314 59.1065,-61.2639 52.6828,-64.0454\"/>\n",
       "</g>\n",
       "<!-- 139638726551816&#45;&gt;139638726551648 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>139638726551816&#45;&gt;139638726551648</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M95.8821,-36.1338C92.2892,-45.0651 87.0004,-55.9618 81.6218,-65.6118\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"78.5221,-63.9789 76.4899,-74.3771 84.5629,-67.5158 78.5221,-63.9789\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x7f002cae7b70>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = mp.Transform(fib, 'fib', upstreams=[s1, s2], downstreams=[s1, s2])\n",
    "p.set_term_flag(term_flag) # term flag needs to be set explicitly \n",
    "\n",
    "psys = mp.PipeSystem([p])\n",
    "psys.build()\n",
    "psys.diagram(draw_streams=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n",
      "34\n",
      "55\n",
      "89\n",
      "144\n",
      "233\n",
      "377\n",
      "610\n",
      "987\n",
      "1597\n",
      "2584\n",
      "4181\n",
      "6765\n",
      "10946\n"
     ]
    }
   ],
   "source": [
    "psys.run()\n",
    "psys.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
