{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to PipeSystems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Minipipe has two API's, PipeLine and PipeSystem. PipeLine is a simple sequential API for linear pipelines. However, it's also possible to build more complex pipe systems with Minipipe that may branch and join to form more complex graph topologies. In this section we'll introduce the concepts of multiple inputs/outputs, switchs and regulators.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import minipipe as mp\n",
    "import numpy as np\n",
    "\n",
    "# Define functors\n",
    "\n",
    "def genRand(n=5):\n",
    "    # generates fake data\n",
    "    for _ in range(n):\n",
    "        yield np.random.rand(4)\n",
    "\n",
    "def batch(batch_size=2):\n",
    "    # A coroutine for breaking data up into batches of 2\n",
    "    x = (yield)\n",
    "    for i in range(len(x)//batch_size):\n",
    "        yield x[i*batch_size:(i+1)*batch_size]\n",
    "\n",
    "def sumBatch(x):\n",
    "    # simple tranform on data\n",
    "    return x.sum()\n",
    "\n",
    "def switch(x):\n",
    "    # if-then switch \n",
    "    return [x, None] if x > 1 else [None, x]\n",
    "\n",
    "def output_gt_1(x):\n",
    "    # sink for greater than 1\n",
    "    print('1 <',x)\n",
    "\n",
    "def output_lt_1(x):\n",
    "    # sink for less than 1\n",
    "    print('1 >',x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we've introduced a Python coroutine `batch`. This coroutine breaks up the data into batches of size 2. This is an example of a Regulator functor. \n",
    "\n",
    "We've also introduced the concept of a switch functor. This functor has two outputs, in this case a list with two elements, however we could have just as easily used a standard tuple. When a Python `None` is encountered in a pipe segment it is simple ignored. Thus `switch` returns x in either the first or second output depending on the value of x. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The PipeSystem API allows you to define general graphs that may branch and join however you choose. In the PipeSystem API you explicitly define the nodes (Pipes) and edges (Streams) of your graph. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define streams\n",
    "\n",
    "s1, s2, s3, s4, s5 = mp.Stream(), mp.Stream(), mp.Stream(), mp.Stream(), mp.Stream()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Pipe segments with up/downstreams\n",
    "# Order is not important\n",
    "\n",
    "pipes = [\n",
    "    mp.Source(genRand(), 'source1', downstreams=[s1]),\n",
    "    mp.Source(genRand(), 'source2', downstreams=[s1]),\n",
    "    mp.Regulator(batch, 'batcher', upstreams=[s1], downstreams=[s2]),\n",
    "    mp.Transform(sumBatch, 'sum', upstreams=[s2], downstreams=[s3]),\n",
    "    mp.Transform(switch, 'switch', upstreams=[s3], downstreams=[s4, s5]),\n",
    "    mp.Sink(output_gt_1, 'print_gt_1', upstreams=[s4]),\n",
    "    mp.Sink(output_lt_1, 'print_lt_1', upstreams=[s5]),\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since `switch` has two outputs it must have two downstreams, otherwise the list/tuple will be interpreted as a single output. Pipe segments may also have multiple inputs, in which case they must have multiple upstreams. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"218pt\" height=\"332pt\"\n",
       " viewBox=\"0.00 0.00 217.54 332.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 328)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-328 213.5415,-328 213.5415,4 -4,4\"/>\n",
       "<!-- 4612877112 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>4612877112</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"57.7457\" cy=\"-306\" rx=\"38.9931\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"57.7457\" y=\"-302.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">source1</text>\n",
       "</g>\n",
       "<!-- 4613419584 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>4613419584</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"105.7457\" cy=\"-234\" rx=\"37.8943\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"105.7457\" y=\"-230.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">batcher</text>\n",
       "</g>\n",
       "<!-- 4612877112&#45;&gt;4613419584 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>4612877112&#45;&gt;4613419584</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M69.3651,-288.5708C75.1432,-279.9038 82.2395,-269.2592 88.6259,-259.6796\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"91.5984,-261.5307 94.2332,-251.2687 85.774,-257.6477 91.5984,-261.5307\"/>\n",
       "</g>\n",
       "<!-- 4613420312 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>4613420312</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"105.7457\" cy=\"-162\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"105.7457\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">sum</text>\n",
       "</g>\n",
       "<!-- 4613419584&#45;&gt;4613420312 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>4613419584&#45;&gt;4613420312</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M105.7457,-215.8314C105.7457,-208.131 105.7457,-198.9743 105.7457,-190.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"109.2458,-190.4132 105.7457,-180.4133 102.2458,-190.4133 109.2458,-190.4132\"/>\n",
       "</g>\n",
       "<!-- 4612878120 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>4612878120</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"153.7457\" cy=\"-306\" rx=\"38.9931\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"153.7457\" y=\"-302.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">source2</text>\n",
       "</g>\n",
       "<!-- 4612878120&#45;&gt;4613419584 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>4612878120&#45;&gt;4613419584</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M142.1262,-288.5708C136.3482,-279.9038 129.2518,-269.2592 122.8654,-259.6796\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"125.7174,-257.6477 117.2581,-251.2687 119.893,-261.5307 125.7174,-257.6477\"/>\n",
       "</g>\n",
       "<!-- 4613421040 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>4613421040</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"105.7457\" cy=\"-90\" rx=\"34.394\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"105.7457\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">switch</text>\n",
       "</g>\n",
       "<!-- 4613420312&#45;&gt;4613421040 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>4613420312&#45;&gt;4613421040</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M105.7457,-143.8314C105.7457,-136.131 105.7457,-126.9743 105.7457,-118.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"109.2458,-118.4132 105.7457,-108.4133 102.2458,-118.4133 109.2458,-118.4132\"/>\n",
       "</g>\n",
       "<!-- 4613421768 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>4613421768</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"48.7457\" cy=\"-18\" rx=\"48.9926\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"48.7457\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">print_gt_1</text>\n",
       "</g>\n",
       "<!-- 4613421040&#45;&gt;4613421768 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>4613421040&#45;&gt;4613421768</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M92.5255,-73.3008C85.5369,-64.4731 76.808,-53.4471 68.9872,-43.5682\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"71.6407,-41.2812 62.6894,-35.6132 66.1523,-45.6261 71.6407,-41.2812\"/>\n",
       "</g>\n",
       "<!-- 4613422608 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>4613422608</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"162.7457\" cy=\"-18\" rx=\"46.5926\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"162.7457\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">print_lt_1</text>\n",
       "</g>\n",
       "<!-- 4613421040&#45;&gt;4613422608 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>4613421040&#45;&gt;4613422608</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M118.9659,-73.3008C125.9545,-64.4731 134.6834,-53.4471 142.5042,-43.5682\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"145.339,-45.6261 148.8019,-35.6132 139.8507,-41.2812 145.339,-45.6261\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x105ed06d8>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build pipesystem\n",
    "\n",
    "psys = mp.PipeSystem(pipes)\n",
    "psys.build()\n",
    "psys.diagram(draw_streams=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 < 1.604944539622751\n",
      "1 < 1.604944539622751\n",
      "1 < 1.251717255372735\n",
      "1 < 1.5286125042703245\n",
      "1 < 1.2712189351541268\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 14:27:28,772 - INFO - source2 - End of stream\n",
      "2020-01-03 14:27:28,774 - INFO - source1 - End of stream\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 < 1.7101062302775798\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 14:27:28,786 - INFO - source2 - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 < 1.251717255372735\n",
      "1 > 0.542044961649252\n",
      "1 < 1.5286125042703245\n",
      "1 < 1.5037996350353544\n",
      "1 > 0.542044961649252\n",
      "1 < 1.2712189351541268\n",
      "1 > 0.973419707259716\n",
      "1 > 0.973419707259716\n",
      "1 < 1.7101062302775798\n",
      "1 > 0.8593722337853537\n",
      "1 < 1.5037996350353544\n",
      "1 > 0.8593722337853537\n",
      "1 < 1.5116823320879524\n",
      "1 < 1.5116823320879524\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 14:27:28,806 - INFO - source1 - Local termination\n",
      "2020-01-03 14:27:28,810 - INFO - batcher - Local termination\n",
      "2020-01-03 14:27:28,812 - INFO - sum - Local termination\n",
      "2020-01-03 14:27:28,818 - INFO - print_gt_1 - Local termination\n",
      "2020-01-03 14:27:28,818 - INFO - print_lt_1 - Local termination\n",
      "2020-01-03 14:27:28,819 - INFO - switch - Local termination\n"
     ]
    }
   ],
   "source": [
    "# Run pipesystem\n",
    "\n",
    "psys.run()\n",
    "psys.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda py36",
   "language": "python",
   "name": "py36"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
