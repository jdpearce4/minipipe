{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to PipeLine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The easiest way to understand MiniPipe is to dive into some examples. So let's first look at a simple toy example of a mini-batch pipeline. This example is just to demonstrate the basic functionality of MiniPipe. We'll get to some real-world applications later on. \n",
    "\n",
    "Most machine learning pipeline will have at least three stages: load, transform and train. In this example we'll simulate these three stages with these simple functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "\n",
    "# 'loads' data\n",
    "def loader(n=10):\n",
    "    for i in range(n):\n",
    "        time.sleep(0.5)\n",
    "        yield i\n",
    "\n",
    "# performs square transformation to data        \n",
    "def transform(x):\n",
    "    time.sleep(1)\n",
    "    return x**2\n",
    "\n",
    "# 'saves' data\n",
    "def save(x):\n",
    "    time.sleep(0.5)\n",
    "    print('x = {}'.format(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first function, `loader`, returns a python generator, which we'll use to generate our \"data\". I've added a delay of 0.5s into the generator to simulate loading time. The next function `transform` is a simple transformation on our data (squares the input), which takes twice as long (1s) as loading. Finally `save` simply prints our data to stdout, also taking 0.5s to simulate saving time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of course in this simple example we can fit all the “data” into memory, but lets pretend like that's not the case. We need to load one chunk of data at a time, where each data chunk is returned with the `next(loader())` method. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Serial Pipeline (without MiniPipe)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets setup a serial pipeline without MiniPipe, where we get the data, transform it and then save it one batch at a time. We'll use jupyter's %%timeit magic cell to time execution time. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 0\n",
      "x = 1\n",
      "x = 4\n",
      "x = 9\n",
      "x = 16\n",
      "x = 25\n",
      "x = 36\n",
      "x = 49\n",
      "x = 64\n",
      "x = 81\n",
      "20.1 s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit -n 1 -r 1\n",
    "\n",
    "# initialize loader\n",
    "ldr = loader()\n",
    "\n",
    "# run pipeline\n",
    "for data in ldr: \n",
    "    x = transform(data)\n",
    "    save(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The for loop calls the `next(lrd)` method 10 times sequentially, each time applying `transform` followed by `save`. As expected the execution time takes about 20s since each iteration takes a total of 2s (0.5s + 1s + 0.5s) and it's repeated 10 times."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MiniPipe: Pipeline Parallel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets see what the same pipeline looks like in MiniPipe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import minipipe as mp\n",
    "\n",
    "# initialize loader\n",
    "ldr = loader()\n",
    "\n",
    "# initialize pipeline\n",
    "pline = mp.PipeLine()\n",
    "\n",
    "# Add pipe segments sequentially \n",
    "pline.add(mp.Source(ldr, name='load')) # loader is initialized\n",
    "pline.add(mp.Transform(transform, name='trans')) \n",
    "pline.add(mp.Sink(save, name='save'))\n",
    "\n",
    "# build pipeline\n",
    "pline.build()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you've used the Keras Sequential API this will look familiar to you. MiniPipe has three basic types of pipe segments: Sources, Transforms and Sinks. Each has one requires an argument called functor. For Sources functors must always be an uninitialized generator, while for Sinks and Transforms functors can be either a function or a class (with a `run` method). There's also an additional pipe segment called a Regulator which accepts coroutines, which will be discuss later. \n",
    "\n",
    "Sources pass data downstream, Sinks accept data from upstream and Transforms do both. In the PipeLine API pipe segments are connected by adding them to an initialized `PipeLine` and then calling the `PipeLine.build` method. \n",
    "\n",
    "We can inspect the pipeline graph with the `PipeLine.diagram` method (requires graphviz) to make sure it looks as expected. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"65pt\" height=\"188pt\"\n",
       " viewBox=\"0.00 0.00 65.19 188.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 184)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-184 61.1949,-184 61.1949,4 -4,4\"/>\n",
       "<!-- 4493112880 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>4493112880</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"28.5975\" cy=\"-162\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"28.5975\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">load</text>\n",
       "</g>\n",
       "<!-- 4493138072 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>4493138072</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"28.5975\" cy=\"-90\" rx=\"28.6953\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"28.5975\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">trans</text>\n",
       "</g>\n",
       "<!-- 4493112880&#45;&gt;4493138072 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>4493112880&#45;&gt;4493138072</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M28.5975,-143.8314C28.5975,-136.131 28.5975,-126.9743 28.5975,-118.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"32.0976,-118.4132 28.5975,-108.4133 25.0976,-118.4133 32.0976,-118.4132\"/>\n",
       "</g>\n",
       "<!-- 4493139472 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>4493139472</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"28.5975\" cy=\"-18\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"28.5975\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">save</text>\n",
       "</g>\n",
       "<!-- 4493138072&#45;&gt;4493139472 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>4493138072&#45;&gt;4493139472</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M28.5975,-71.8314C28.5975,-64.131 28.5975,-54.9743 28.5975,-46.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"32.0976,-46.4132 28.5975,-36.4133 25.0976,-46.4133 32.0976,-46.4132\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x10bc69be0>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pline.diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks good. Now we can run the pipeline; let's again time it as before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 0\n",
      "x = 1\n",
      "x = 4\n",
      "x = 9\n",
      "x = 16\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 16:39:20,590 - INFO - load - End of stream\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 25\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 16:39:21,578 - INFO - load - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 36\n",
      "x = 49\n",
      "x = 64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 16:39:24,578 - INFO - trans - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 81\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 16:39:25,083 - INFO - save - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit -n 1 -r 1\n",
    "\n",
    "pline.run()\n",
    "pline.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see from the logging (which can be set in the `PipeLine.build` method) where each pipe segment shutdown. When the end of stream was reached Source shutdown, followed by Transform and Sink. \n",
    "\n",
    "The execution time is now 11s instead of 20s. That's because each pipe segments executes on it's own thread/process allowing for parallel execution. Of course dependent nodes still have to wait for data to be passed downstream, but once data is passed the node can start on the next batch without waiting for the full pipeline to be executed. Thus we expect the total time to be 0.5s (initial load) + 10 x (1s) + 0.5s (final save) = 11s. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default MiniPipe will place each pipe segment on its own process. Each process runs independently in an asynchronous fashion. MiniPipe is an API built on top of Python's Multiprocessing library. \n",
    "\n",
    "There is no limit to the number of processes you can run, however you are limited by the number of physical cores on your machine. For computation heavy pipelines bound to the CPU you may see performance degradation if the number of pipe segments exceed the number of physical cores. On the other hand, I/O processes such as loading, or computation that's bound to the GPU such as training, this should be less of an issue. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MiniPipe: Horizontal Scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since `Transform` takes twice as long as `Loader` and `Save` we can additionally speed things up by by increasing the number of Transform processes. Minipipe is designed for this type of horizontal parallelization as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# initialize loader\n",
    "ldr = loader()\n",
    "\n",
    "# initialize pipeline\n",
    "pline = mp.PipeLine()\n",
    "\n",
    "# add pipe segments\n",
    "pline.add(mp.Source(ldr, name='load')) # loader is initialized\n",
    "pline.add(mp.Transform(transform, name='trans'), n_processes=2) # ask for 2 processes\n",
    "pline.add(mp.Sink(save, name='save'))\n",
    "\n",
    "# build pipeline\n",
    "pline.build()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We setup the pipeline exactly as before, except now when we add Transform to the pipeline we reserve two processes with the `n_processes` argument. \n",
    "\n",
    "Now lets look at the pipeline graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"176pt\" height=\"188pt\"\n",
       " viewBox=\"0.00 0.00 176.39 188.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 184)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-184 172.3933,-184 172.3933,4 -4,4\"/>\n",
       "<!-- 4493280592 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>4493280592</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"83.6967\" cy=\"-162\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"83.6967\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">load</text>\n",
       "</g>\n",
       "<!-- 4493281936 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>4493281936</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"37.6967\" cy=\"-90\" rx=\"37.8943\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"37.6967\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">trans_0</text>\n",
       "</g>\n",
       "<!-- 4493280592&#45;&gt;4493281936 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>4493280592&#45;&gt;4493281936</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M73.0277,-145.3008C67.5006,-136.6496 60.6246,-125.8873 54.4115,-116.1623\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"57.2829,-114.1558 48.9495,-107.6132 51.384,-117.9245 57.2829,-114.1558\"/>\n",
       "</g>\n",
       "<!-- 4493282664 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>4493282664</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"130.6967\" cy=\"-90\" rx=\"37.8943\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"130.6967\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">trans_1</text>\n",
       "</g>\n",
       "<!-- 4493280592&#45;&gt;4493282664 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>4493280592&#45;&gt;4493282664</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M94.5975,-145.3008C100.2448,-136.6496 107.2702,-125.8873 113.6185,-116.1623\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"116.6637,-117.9002 119.1992,-107.6132 110.8021,-114.0738 116.6637,-117.9002\"/>\n",
       "</g>\n",
       "<!-- 4493304552 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>4493304552</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"83.6967\" cy=\"-18\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"83.6967\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">save</text>\n",
       "</g>\n",
       "<!-- 4493281936&#45;&gt;4493304552 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>4493281936&#45;&gt;4493304552</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M48.832,-72.5708C54.4507,-63.7763 61.3702,-52.9457 67.5598,-43.2577\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"70.5461,-45.0843 72.9806,-34.7729 64.6472,-41.3155 70.5461,-45.0843\"/>\n",
       "</g>\n",
       "<!-- 4493282664&#45;&gt;4493304552 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>4493282664&#45;&gt;4493304552</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M119.3193,-72.5708C113.5784,-63.7763 106.5084,-52.9457 100.1843,-43.2577\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"103.0427,-41.2335 94.6456,-34.7729 97.1811,-45.0599 103.0427,-41.2335\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x10bd06b70>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pline.diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see there are two separate Transform processes, but it's somewhat unclear what happens to the data after Source. To understand what's happening here we have to introduce the concept of a Stream.\n",
    "\n",
    "A Stream is a multiprocessing queue that holds the data while processes are busy. Each pipe segment is connected to a Stream. To see the Streams in the graph diagram along with the pipe segments you just need to set the `draw_streams` argument to true. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"176pt\" height=\"332pt\"\n",
       " viewBox=\"0.00 0.00 176.39 332.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 328)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-328 172.3933,-328 172.3933,4 -4,4\"/>\n",
       "<!-- 4493280592 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>4493280592</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"83.6967\" cy=\"-306\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"83.6967\" y=\"-302.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">load</text>\n",
       "</g>\n",
       "<!-- 4493281320 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>4493281320</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"117.6967,-252 49.6967,-252 49.6967,-216 117.6967,-216 117.6967,-252\"/>\n",
       "<text text-anchor=\"middle\" x=\"83.6967\" y=\"-230.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream_0</text>\n",
       "</g>\n",
       "<!-- 4493280592&#45;&gt;4493281320 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>4493280592&#45;&gt;4493281320</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M83.6967,-287.8314C83.6967,-280.131 83.6967,-270.9743 83.6967,-262.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"87.1968,-262.4132 83.6967,-252.4133 80.1968,-262.4133 87.1968,-262.4132\"/>\n",
       "</g>\n",
       "<!-- 4493281936 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>4493281936</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"37.6967\" cy=\"-162\" rx=\"37.8943\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"37.6967\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">trans_0</text>\n",
       "</g>\n",
       "<!-- 4493281320&#45;&gt;4493281936 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>4493281320&#45;&gt;4493281936</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M72.0889,-215.8314C66.6835,-207.3707 60.1549,-197.1521 54.2447,-187.9014\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"57.158,-185.9603 48.8246,-179.4177 51.2591,-189.7291 57.158,-185.9603\"/>\n",
       "</g>\n",
       "<!-- 4493282664 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>4493282664</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"130.6967\" cy=\"-162\" rx=\"37.8943\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"130.6967\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">trans_1</text>\n",
       "</g>\n",
       "<!-- 4493281320&#45;&gt;4493282664 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>4493281320&#45;&gt;4493282664</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M95.5567,-215.8314C101.0797,-207.3707 107.7502,-197.1521 113.7888,-187.9014\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"116.7913,-189.7047 119.3268,-179.4177 110.9297,-185.8783 116.7913,-189.7047\"/>\n",
       "</g>\n",
       "<!-- 4493303936 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>4493303936</title>\n",
       "<polygon fill=\"none\" stroke=\"#000000\" points=\"117.6967,-108 49.6967,-108 49.6967,-72 117.6967,-72 117.6967,-108\"/>\n",
       "<text text-anchor=\"middle\" x=\"83.6967\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">stream_1</text>\n",
       "</g>\n",
       "<!-- 4493281936&#45;&gt;4493303936 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>4493281936&#45;&gt;4493303936</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M48.832,-144.5708C54.1918,-136.1815 60.7355,-125.9392 66.7,-116.6035\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"69.749,-118.3319 72.1835,-108.0206 63.8501,-114.5632 69.749,-118.3319\"/>\n",
       "</g>\n",
       "<!-- 4493282664&#45;&gt;4493303936 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>4493282664&#45;&gt;4493303936</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M119.3193,-144.5708C113.8429,-136.1815 107.157,-125.9392 101.0628,-116.6035\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"103.8572,-114.4812 95.4601,-108.0206 97.9955,-118.3076 103.8572,-114.4812\"/>\n",
       "</g>\n",
       "<!-- 4493304552 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>4493304552</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"83.6967\" cy=\"-18\" rx=\"27\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"83.6967\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">save</text>\n",
       "</g>\n",
       "<!-- 4493303936&#45;&gt;4493304552 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>4493303936&#45;&gt;4493304552</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M83.6967,-71.8314C83.6967,-64.131 83.6967,-54.9743 83.6967,-46.4166\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"87.1968,-46.4132 83.6967,-36.4133 80.1968,-46.4133 87.1968,-46.4132\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x10bd06a20>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pline.diagram(draw_streams=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that `loader` puts data on its downstream queue `stream_0` while both `Transform_0` and `Transform_1` get data from that same queue. This allows the two Transform processes to executing asynchronously. The first available Transform process will take the data, so in this graph the order of data chunks in not necessarily preserved. \n",
    "\n",
    "Now lets see how long this pipeline takes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 0\n",
      "x = 1\n",
      "x = 4\n",
      "x = 9\n",
      "x = 16\n",
      "x = 25\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 16:39:31,164 - INFO - load - End of stream\n",
      "2020-01-03 16:39:31,171 - INFO - load - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 36\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 16:39:31,665 - INFO - trans_0 - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 49\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 16:39:32,166 - INFO - trans_1 - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 64\n",
      "x = 81\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-01-03 16:39:32,711 - INFO - save - Local termination\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.58 s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit -n 1 -r 1\n",
    "\n",
    "pline.run()\n",
    "pline.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see it takes just over 6.5s as expected, about 1/3rd of the original execution time. \n",
    "\n",
    "At this point the only way to speed things up further is to introduce parallel load processes. This can be done by using two separate Sources each with their own generator function. However this cannot be done with the PipeLine API since it only allows for sequential pipelines. In the next section we'll introduce the PipeSystem API, which allows for general graph structures. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
